<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.atlandes.auth.dao.RoleMapper">

    <resultMap id="BaseResultMap" type="com.atlandes.auth.po.Role">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, name, type
    </sql>

    <sql id="limit_sql">
        <if test="page_sql != null and page_sql != ''">
            ${page_sql}
        </if>
    </sql>

    <sql id="where_all">
        <where>
            <if test="findContent != null and findContent !='' ">
                and (
                LOWER(name) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%") or
                LOWER(type) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")
                )
            </if>
        </where>
    </sql>

    <insert id="initData">
        {call init_shiro_demo()}
    </insert>

    <select id="findRoleByUserId" resultType="java.lang.String">
        SELECT r.type
        FROM auth_role r, auth_re_user_and_role ur
        WHERE ur.rid = r.id AND ur.uid = #{id,jdbcType=BIGINT}
    </select>

    <!-- 普通的分页查询 -->
    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth_role
        <include refid="where_all"/>
        <include refid="limit_sql"/>
    </select>

    <select id="findCount" resultMap="BaseResultMap">
        select count(id) from auth_role
        <include refid="where_all"/>
    </select>

    <!-- 选择角色给用户 -->
    <select id="selectRoleByUserId" resultType="com.atlandes.auth.bo.RoleBO">
        SELECT
            ur.id,
            ur.name,
            ur.type,
            ifnull(uur.uid, 0) AS marker
        FROM auth_role ur
            LEFT JOIN (SELECT *
                       FROM auth_re_user_and_role
                       WHERE uid = #{id,jdbcType=BIGINT}) uur ON uur.rid = ur.id
    </select>

    <!-- 权限分配的分页查询 -->
    <select id="findRoleAndPermission" resultType="com.atlandes.auth.bo.PermissionAllocationBO">
        select
        ur.id,
        ur.type,
        ur.name,
        group_concat(up.name) as permissionNames,
        group_concat(up.id) as permissionIds
        from auth_role ur
        left join auth_role_permission urp on urp.rid = ur.id
        left join auth_permission up on up.id = urp.pid
        <where>
            <if test="findContent != null and findContent !='' ">
                and (
                LOWER(ur.name) like CONCAT("%", #{findContent,jdbcType=VARCHAR}, "%") or
                LOWER(ur.type) like CONCAT("%", #{findContent,jdbcType=VARCHAR}, "%")
                )
            </if>
        </where>
        group by ur.id
        <include refid="limit_sql"/>
    </select>

    <!-- 查询用户全部的role & permission -->
    <resultMap id="findNowAllPermission_resultMap" extends="BaseResultMap" type="com.atlandes.auth.po.Role">
        <collection property="permissions" javaType="com.atlandes.auth.po.Permission">
            <id column="pid" property="id" jdbcType="BIGINT"/>
            <result column="pname" property="name" jdbcType="VARCHAR"/>
            <result column="url" property="url" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <!-- 根据用户ID，查询所有权限 -->
    <select id="findNowAllPermission" resultMap="findNowAllPermission_resultMap">
        SELECT
            ur.id,
            ur.name,
            ur.type,
            up.id      pid,
            up.url,
            up.name AS pname
        FROM (SELECT rid
              FROM auth_re_user_and_role
              WHERE uid = #{userId,jdbcType=BIGINT}) uur
            LEFT JOIN auth_role ur ON uur.rid = ur.id
            LEFT JOIN auth_role_permission urp ON urp.rid = ur.id
            LEFT JOIN auth_permission up ON up.id = urp.pid
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from auth_role
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM auth_role
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.atlandes.auth.po.Role">
        INSERT INTO auth_role (id, name, type)
        VALUES (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR})
    </insert>

    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.atlandes.auth.po.Role">
        insert into auth_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="type != null">
                type,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.atlandes.auth.po.Role">
        update auth_role
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.atlandes.auth.po.Role">
        UPDATE auth_role
        SET name = #{name,jdbcType=VARCHAR}, type = #{type,jdbcType=VARCHAR}
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

</mapper>
